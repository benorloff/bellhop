generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String @id @default(uuid())
  userId    String @unique
  firstName String
  lastName  String
  imageUrl  String @db.Text
  email     String @db.Text

  sites   Site[]
  members Member[]
  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DataCenter {
  US_IOWA
  CANADA_MONTREAL
  UNITED_KINGDOM_LONDON
  EUROPE_BELGIUM
  AUSTRALIA_SYDNEY
}

model Site {
  id       String  @id @default(uuid())
  name     String
  url      String
  imageUrl String?
  dataCenter DataCenter @default(US_IOWA)
  ipAddress String
  slug     String  @unique
  orgId    String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  OWNER
  ADMIN
  COLLABORATOR
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(COLLABORATOR)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([siteId])
}

model Ticket {
  id String @id @default(uuid())
  freshdeskId Int @unique
  priority Int
  source Int
  status Int
  subject String
  type String
  descriptionText String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([siteId])
}

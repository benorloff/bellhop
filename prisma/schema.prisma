generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Can this model be deleted now that Clerk
// is storing privateMetadata? 
model Profile {
  id            String @id @default(uuid())
  userId        String @unique
  zendeskUserId BigInt @unique
  firstName     String
  lastName      String
  imageUrl      String @db.Text
  email         String @unique @db.Text

  sites   Site[]
  members Member[]
  tickets Ticket[]
  invites Invite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DataCenter {
  US_IOWA
  CANADA_MONTREAL
  UNITED_KINGDOM_LONDON
  EUROPE_BELGIUM
  AUSTRALIA_SYDNEY
}

model Site {
  id         String     @id @default(uuid())
  name       String
  url        String
  imageUrl   String?
  dataCenter DataCenter @default(US_IOWA)
  ipAddress  String
  slug       String     @unique
  orgId      String
  orgSlug    String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  tickets Ticket[]
  invites Invite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  OWNER
  ADMIN
  COLLABORATOR
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(COLLABORATOR)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([profileId, siteId], name: "profileId_siteId")
  @@index([profileId, siteId], name: "profileId_siteId")
}

model Ticket {
  id              String @id @default(uuid())
  freshdeskId     BigInt @unique
  priority        Int
  source          Int
  status          Int
  subject         String
  type            String
  descriptionText String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([siteId])
}

model Invite {
  id             String   @id @default(uuid())
  recipientEmail String
  expiresAt      DateTime @default(dbgenerated("NOW() + interval '48 hours'"))

  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([siteId])
}

enum Action {
  CREATE
  UPDATE
  DELETE
}

enum EntityType {
  PROFILE
  SITE
  MEMBER
  TICKET
  INVITE
}

model AuditLog {
  id          String     @id @default(uuid())
  orgId       String
  action      Action
  entityId    String
  entityType  EntityType
  entityTitle String
  userId      String
  userImage   String     @db.Text
  userName    String     @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String  @id
  active      Boolean
  name        String  @db.Text
  description String? @db.Text
  image       String? @db.Text
  metadata    Json

  prices Price[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PriceType {
  one_time
  recurring
}

enum PriceInterval {
  day
  week
  month
  year
}

model Price {
  id            String        @id
  active        Boolean
  nickname      String?       @db.Text
  unitAmount    BigInt
  currency      String
  type          PriceType
  interval      PriceInterval
  intervalCount Int
  metadata      Json

  productId String
  product   Product @relation(fields: [productId], references: [id])

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, id], name: "productId_priceId")
  @@index([productId, id], name: "productId_priceId")
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

model Subscription {
  id                 String             @id
  customer           String             @unique
  orgId              String             @unique
  status             SubscriptionStatus
  quantity           Int
  currency           String
  currentPeriodEnd   DateTime
  currentPeriodStart DateTime
  cancelAtPeriodEnd  Boolean
  canceledAt         DateTime?
  endedAt            DateTime?
  cancelAt           DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  metadata           Json

  priceId String
  price   Price  @relation(fields: [priceId], references: [id])

  createdAt DateTime
  updatedAt DateTime @updatedAt

  @@index([customer])
  @@index([orgId])
}
